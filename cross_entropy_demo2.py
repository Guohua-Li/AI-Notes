# -*- coding: utf-8 -*-
"""cross_entropy_demo2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KjSkCT_JgcEGgzf7iTghom6JWI9j7tkN
"""

import torch as T
import torch.nn.functional as F
import matplotlib.pyplot as plt

P  = T.tensor([1.0,   0.0,   0.0,   0.0  ])

L1 = T.tensor([3.9, 0.01, 0.01, 0.2])
L2 = T.tensor([2.4, 0.5,  0.25, 0.2])
L3 = T.tensor([1.5, 0.5,  0.5,  0.5])
L4 = T.tensor([0.2, 0.25, 0.5,  3.0])

Q1 = T.softmax(L1, dim=0)
Q2 = T.softmax(L2, dim=0)
Q3 = T.softmax(L3, dim=0)
Q4 = T.softmax(L4, dim=0)

Q1 = Q1.reshape(1,-1)
Q2 = Q2.reshape(1,-1)
Q3 = Q3.reshape(1,-1)
Q4 = Q4.reshape(1,-1)

r1 = F.nll_loss(Q1, T.tensor([0]))
r2 = F.nll_loss(Q2, T.tensor([0]))
r3 = F.nll_loss(Q3, T.tensor([0]))
r4 = F.nll_loss(Q4, T.tensor([0]))
print(f'ce1 = {r1}\nce2 = {r2}\nce3 = {r3}\nce4 = {r4}')

r1 = F.nll_loss(T.log(Q1), T.tensor([0]))
r2 = F.nll_loss(T.log(Q2), T.tensor([0]))
r3 = F.nll_loss(T.log(Q3), T.tensor([0]))
r4 = F.nll_loss(T.log(Q4), T.tensor([0]))
print(f'r1 = {r1}\nr2 = {r2}\nr3 = {r3}\nr4 = {r4}')

T.log(Q1), T.log(Q2), T.log(Q3), T.log(Q4)

L = T.stack([L1, L2, L3, L4])
target = T.tensor([0,0,0,0]) # indices of "hot spots"
ce = F.nll_loss(F.log_softmax(L,-1), target)
print(ce)

(F_ce1+F_ce2+F_ce3+F_ce4)/4.